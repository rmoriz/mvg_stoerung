name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage flake8

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run unit tests with coverage
      run: |
        coverage run -m pytest test_mvg_incident_parser.py -v
        coverage report -m
        coverage xml

    - name: Run integration tests
      run: |
        python3 run_all_tests.py --integration-only --verbose
      timeout-minutes: 5

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Test script execution
      run: |
        # Test that the script runs without errors (with timeout)
        timeout 30s python3 mvg_stoerung.py || echo "Script execution test completed"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true

    - name: Check dependencies for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check || true

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: Type checking with mypy
      run: |
        mypy mvg_stoerung.py --ignore-missing-imports || true

  build:
    needs: [test, security, code-quality]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Create distribution package
      run: |
        # Create a simple setup.py for packaging
        cat > setup.py << EOF
        from setuptools import setup, find_packages
        
        setup(
            name="mvg_stoerung",
            version="1.0.0",
            description="MVG Stoerung - Filters incidents from MVG disruption messages",
            author="MVG Parser Team",
            py_modules=["mvg_stoerung"],
            install_requires=["requests>=2.25.0"],
            python_requires=">=3.11",
            entry_points={
                "console_scripts": [
                    "mvg-stoerung=mvg_stoerung:main",
                ],
            },
            classifiers=[
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.13",
            ],
        )
        EOF
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify:
    needs: [build]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify on success
      if: needs.build.result == 'success'
      run: echo "✅ CI/CD pipeline completed successfully!"

    - name: Notify on failure
      if: needs.build.result == 'failure' || needs.test.result == 'failure'
      run: echo "❌ CI/CD pipeline failed!"